

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: messenger
      POSTGRES_USER: messenger
      POSTGRES_PASSWORD: messenger
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U messenger -d messenger"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s
    volumes:
      - db_data:/var/lib/postgresql/data
    

  auth-api:
    build:
      context: ./apps/auth-api
    environment:
      DATABASE_URL: postgresql://messenger:messenger@db:5432/messenger
      JWT_SECRET: supersecret_dev_change_me
      CORS_ORIGIN: http://localhost:3000
      PORT: 5001
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "5001:5001"

  signaling:
    build:
      context: ./apps/signaling-server
    environment:
      JWT_SECRET: supersecret_dev_change_me
      CORS_ORIGIN: http://localhost:3000
      PORT: 4000
    depends_on:
      - auth-api
    ports:
      - "4000:4000"

  
  coturn:
    image: instrumentisto/coturn
    command: >
      -n --log-file=stdout
      --min-port=49160 --max-port=49200
      --realm=messenger.local --listening-port=3478 --fingerprint
      --lt-cred-mech
      --user=turnuser:turnpass
      --external-ip=77.110.98.32            # <— публичный IP
    restart: unless-stopped
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49160-49200:49160-49200/udp"       # <— ОБЯЗАТЕЛЬНО

  web:
    build:
      context: ./apps/web
      args:
        NEXT_PUBLIC_SIGNALING_URL: http://localhost:4000
        NEXT_PUBLIC_API_URL: http://localhost:5001
        NEXT_PUBLIC_TURN_URL: turn:77.110.98.32:3478
        NEXT_PUBLIC_TURN_USER: turnuser
        NEXT_PUBLIC_TURN_PASS: turnpass
    environment:
      NEXT_PUBLIC_SIGNALING_URL: http://localhost:4000
      NEXT_PUBLIC_API_URL: turn:77.110.98.32:3478
      NEXT_PUBLIC_TURN_URL: turn:localhost:3478
      NEXT_PUBLIC_TURN_USER: turnuser
      NEXT_PUBLIC_TURN_PASS: turnpass
      PORT: 3000
    depends_on:
      - signaling
      - coturn
    ports:
      - "80:3000"

  caddy:
    image: caddy:2
    depends_on:
      - web
      - signaling
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    # Caddy слушает только внутри сети compose на 3001
    ports:
      - "3001:3001"

  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    depends_on:
      - caddy
    command: tunnel --no-autoupdate --url http://caddy:3001

volumes:
  db_data: